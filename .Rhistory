dev.off()
hier_clustering <- hclust(as.dist(rpd_mat2), method="ward.D")
hier_groups <- cutree(hier_clustering, k=2)
hier_groups <- as.matrix(hier_groups)
surv_mat <- clinical_data[,c("InternalId", "Survival_days_capped*")]
surv_mat <- na.omit(clinical_data[,c("InternalId", "Survival_days_capped*", "Censored")])
surv_mat$Censored <- 1+surv_mat$Censored
new_vec <- cbind(as.matrix(surv_mat$`Survival_days_capped*`),
as.matrix(surv_mat$`Censored`))
rownames(new_vec) <- surv_mat$InternalId
new_vec <- as.data.frame(new_vec)
new_vec$binary_surv <- as.integer(surv_mat$`Survival_days_capped*`>mean(surv_mat$`Survival_days_capped*`, na.rm = T))
surv <- cbind(new_vec, hier_groups[match(rownames(new_vec), rownames(hier_groups))])
surv <- as.data.frame(na.omit(surv))
colnames(surv) <- c("Survival", "Censored","Binary_survival" ,"Clus_group")
surv$Binary_survival <- as.factor(surv$Binary_survival)
surv$Clus_group <- as.factor(surv$Clus_group)
ggsobj <- ggsurvplot(fit = survminer::surv_fit(Surv(`Survival`,Censored) ~ Clus_group,
data = surv),
xlab = "Days",
ylab = "Overall survival probability",risk.table = T)
res.cox<-coxph(Surv(`Survival`,Censored) ~ Clus_group,
data = surv)
p1 <- KMplot(ggsobj, summary(res.cox)$conf.int[2], summary(res.cox)$coefficients[5])
dev.off()
recur_mat <- recur_data[,c(1,2,3)]
recur_mat$Recurrence <- 1-recur_mat$Recurrence
rownames(recur_mat) <- recur_mat$ID
recur <- as.data.frame(na.omit(cbind(recur_mat, hier_groups[match(rownames(recur_mat), rownames(hier_groups))])))
colnames(recur)[4] <- "Clus_group"
recur$Clus_group <- as.factor(recur$Clus_group)
ggsobj <- ggsurvplot(fit = survminer::surv_fit(Surv(Recurrence_time,Recurrence) ~ Clus_group,
data = recur),
xlab = "Days",
ylab = "Overall recurrence probability",risk.table = T)
res.cox<-coxph(Surv(Recurrence_time,Recurrence) ~ Clus_group,
data = recur)
p2 = KMplot(ggsobj, summary(res.cox)$conf.int[2], summary(res.cox)$coefficients[5])
dev.off()
png(paste0("/Users/seals/Desktop/CSPH/Jun9/MIBI_pipeline/Diveregence_analysis/",IRP_name,"/JSD_Surv_Rec_with_n_", ngrids,".png"),
width = 1000, height = 600, units = "px", res = 100)
print(gridExtra::grid.arrange( p1, p2, ncol = 2))
dev.off()
return(surv$Clus_group)
}
#for(ngrids in c(2^9, 2^10, 2^11, 2^12))
#{
#  ngrid_plotter(ngrids)
#}
#do.call(list(2^9, 2^10, 2^11, 2^12), ngrid_plotter)
#apply(matrix(c(2^7, 2^9, 2^10, 2^11, 2^12),5,1), 1, ngrid_plotter)
k = 1
clus_group = NULL
for(i in c(2^7, 2^9, 2^10, 2^11, 2^12)){
clus_group[[k]] = ngrid_plotter(i)
k = k+1
}
do.call(cbind,clus_group)
all_patients = intersect(unique(selected_data$SampleID),clinical_data$InternalId)
p_status_noncold = p_status[p_status$V2!=2,]
i = 1; j = 3
IRP_name = c(IRP_names[i],IRP_names[j])
all_patients = intersect(all_patients,p_status_noncold$V1)
PD1 = range_std_data[,c("SampleID", IRP_name)]
len_cov = length(IRP_name)
good_pats = NULL
which_image = 1
for(images in all_patients){
data_image = PD1[PD1$SampleID==images,]
x = NULL
m = NULL
for(i in 1:len_cov)
{
x[[i]] = na.omit(as.matrix(data_image[,(i+1)]))
chk = x[[i]]
m[[i]] = length(which(chk>0))
}
#if(!0 %in% unlist(m)){good_pats[[which_image]]=1}
if(sum(unlist(m)>10) == len_cov){good_pats[[which_image]]=1}
else good_pats[[which_image]]=0
which_image = which_image+1
}
all_patients = all_patients[which(unlist(good_pats)!=0)]
sel_images = as.numeric(all_patients)
#chosen_covariates = IRP_names
ngrid_plotter<-function(ngrids){
allones = rep(1, 1)
RParray_dens = array(NA, dim = c(length(sel_images), 2, ngrids))
x = NULL
pos_counts = matrix(0,length(sel_images),3)
which_images = 1
for(images in sel_images){
data_image = PD1[PD1$SampleID==images,]
x[[1]] = na.omit(as.matrix(data_image[,2]))
den = dens_univ(x, m = ngrids)
RParray_dens[which_images,1,] = den[[1]]
RParray_dens[which_images,2,] = den[[2]]
which_images = which_images + 1
}
num_images = length(sel_images)
rpd_mat = matrix(0, num_images, num_images)
for( i in 1:num_images){
for(j in 1:num_images){
if(j > i){
rpd_mat[i,j] <- jensen_shannon_dist(RParray_dens[i,1,], RParray_dens[j,1,])
}
}
}
rpd_mat <- rpd_mat+t(rpd_mat)
colnames(rpd_mat) <- rownames(rpd_mat) <- sel_images
rpd_mat[rpd_mat>quantile(rpd_mat,0.95)] <- quantile(rpd_mat,0.95)
rpd_mat2 <- rpd_mat
rpd_mat2 <- rpd_mat/max(rpd_mat)
RParray_dens = array(NA, dim = c(length(sel_images), 2, ngrids))
x = NULL
pos_counts = matrix(0,length(sel_images),3)
which_images = 1
for(images in sel_images){
data_image = PD1[PD1$SampleID==images,]
x[[1]] = na.omit(as.matrix(data_image[,3]))
den = dens_univ(x, m = ngrids)
RParray_dens[which_images,1,] = den[[1]]
RParray_dens[which_images,2,] = den[[2]]
which_images = which_images + 1
}
rpd_mat = matrix(0, num_images, num_images)
for( i in 1:num_images){
for(j in 1:num_images){
if(j > i){
rpd_mat[i,j] <- jensen_shannon_dist(RParray_dens[i,1,], RParray_dens[j,1,])
}
}
}
rpd_mat <- rpd_mat+t(rpd_mat)
colnames(rpd_mat) <- rownames(rpd_mat) <- sel_images
check_na_row <- which(is.na(rpd_mat[,1])==T)
if(length(check_na_row)>0){
rpd_mat = rpd_mat[-check_na_row,-check_na_row]
rpd_mat2 = rpd_mat2[-check_na_row,-check_na_row]
}
rpd_mat[rpd_mat>quantile(rpd_mat,0.95)] <- quantile(rpd_mat,0.95)
rpd_mat3 <- rpd_mat
rpd_mat3 <- rpd_mat/max(rpd_mat)
rpd_mat2 <- rpd_mat2 + rpd_mat3;
#rpd_mat2[rpd_mat2>quantile(rpd_mat2,0.95)] = quantile(rpd_mat2,0.95)
rpd_mat2 <- rpd_mat2/max(rpd_mat2)
dir.create(paste0("/Users/seals/Desktop/CSPH/Jun9/MIBI_pipeline/Diveregence_analysis/",IRP_name[1], "_",IRP_name[2]))
png(paste0("/Users/seals/Desktop/CSPH/Jun9/MIBI_pipeline/Diveregence_analysis/",IRP_name[1], "_",IRP_name[2],"/heatmap_of_JSDs_with_n_", ngrids,".png"),
width = 800, height = 800, units = "px", res = 150)
p0 <- pheatmap::pheatmap(rpd_mat2, cluster_rows = TRUE,
cluster_cols = TRUE,show_colnames = T, show_rownames = T,treeheight_row=0,treeheight_col = 2)
print(p0)
dev.off()
hier_clustering <- hclust(as.dist(rpd_mat2), method="ward.D")
hier_groups <- as.matrix(cutree(hier_clustering, k=2))
surv_mat <- clinical_data[,c("InternalId", "Survival_days_capped*")]
surv_mat <- na.omit(clinical_data[,c("InternalId", "Survival_days_capped*", "Censored")])
surv_mat$Censored <- 1+surv_mat$Censored
new_vec <- cbind(as.matrix(surv_mat$`Survival_days_capped*`),
as.matrix(surv_mat$`Censored`))
rownames(new_vec) <- surv_mat$InternalId
new_vec <- as.data.frame(new_vec)
new_vec$binary_surv <- as.integer(surv_mat$`Survival_days_capped*`>mean(surv_mat$`Survival_days_capped*`, na.rm = T))
surv <- as.data.frame(na.omit(cbind(new_vec, hier_groups[match(rownames(new_vec), rownames(hier_groups))])))
colnames(surv) <- c("Survival", "Censored","Binary_survival" ,"Clus_group")
surv$Binary_survival <- as.factor(surv$Binary_survival)
surv$Clus_group <- as.factor(surv$Clus_group)
ggsobj <- ggsurvplot(fit = survminer::surv_fit(Surv(`Survival`,Censored) ~ Clus_group,
data = surv),
xlab = "Days",
ylab = "Overall survival probability",risk.table = T)
res.cox<-coxph(Surv(`Survival`,Censored) ~ Clus_group,
data = surv)
p1 <- KMplot(ggsobj, summary(res.cox)$conf.int[2], summary(res.cox)$coefficients[5])
dev.off()
recur_mat <- recur_data[,c(1,2,3)]
recur_mat$Recurrence <- 1-recur_mat$Recurrence
rownames(recur_mat) <- recur_mat$ID
recur <- as.data.frame(na.omit(cbind(recur_mat, hier_groups[match(rownames(recur_mat), rownames(hier_groups))])))
colnames(recur)[4] <- "Clus_group"
recur$Clus_group <- as.factor(recur$Clus_group)
ggsobj = ggsurvplot(fit = survminer::surv_fit(Surv(Recurrence_time,Recurrence) ~ Clus_group,
data = recur),
xlab = "Days",
ylab = "Overall recurrence probability",risk.table = T)
res.cox<-coxph(Surv(Recurrence_time,Recurrence) ~ Clus_group,
data = recur)
p2 <- KMplot(ggsobj, summary(res.cox)$conf.int[2], summary(res.cox)$coefficients[5])
dev.off()
png(paste0("/Users/seals/Desktop/CSPH/Jun9/MIBI_pipeline/Diveregence_analysis/",IRP_name[1], "_",IRP_name[2],"/JSD_Surv_Rec_with_n_", ngrids,".png"),
width = 1000, height = 600, units = "px", res = 100)
print(gridExtra::grid.arrange( p1, p2, ncol = 2))
dev.off()
return(surv$Clus_group)
}
k = 1
clus_group = NULL
for(i in c(2^7, 2^9, 2^10, 2^11, 2^12)){
clus_group[[k]] = ngrid_plotter(i)
k = k+1
}
#apply(matrix(c(2^7, 2^9, 2^10, 2^11, 2^12),5,1), 1, ngrid_plotter)
do.call(cbind,clus_group)
suppressMessages(library(dplyr))
suppressMessages(library(data.table))
suppressMessages(library(LaplacesDemon))
suppressMessages(library(ggplot2))
suppressMessages(library(ComplexHeatmap))
suppressMessages(library(igraph))
suppressMessages(library(PerformanceAnalytics))
suppressMessages(require(survival))
suppressMessages(require(survminer))
suppressMessages(source("/Users/seals/Desktop/CSPH/Jun9/alex_funcs.R"))
suppressMessages(source("/Users/seals/Desktop/CSPH/May4/density_finder.R"))
my_working_dir = '/Users/seals/Desktop/Debashish_data'
python_path = "/usr/bin/python"
cell_data = read.csv(paste0(my_working_dir,"/TNBC_shareCellData/cellData.csv"))
p_status = read.csv(paste0(my_working_dir,"/TNBC_shareCellData/patient_class.csv"),header = F)
clinical_data = readxl::read_excel(paste0(my_working_dir,"/TNBC_shareCellData/tnbc_clinical.xlsx"),col_names = T,skip = 1)
recur_data = read.csv("/Users/seals/Downloads/rasp-mibi-main/rawdata/clinical_data.csv")
groups = c("Unidentified", "Immune", "Endothelial", "Mesenchymal-like", "Tumor", "Keratin-positive tumor")
cell_data$Group = as.factor(cell_data$Group)
levels(cell_data$Group) <- groups
marker_names = names(cell_data)[4:52]
cell_data = na.omit(cell_data)
library(Rphenograph)
library(phenoptrReports)
library(phenoptr)
remove.packages("phenoptrReports")
remove.packages("phenoptr")
remove.packages("Rphenograph")
install.packages("devtools")
devtools::install_github("akoyabio/phenoptr")
library(phenoptr)
ovarian_data <- read_cell_seg_data("/Users/seals/Desktop/CSPH/Consolidated_data.txt/Consolidated_data.txt")
200^2
library(tidyverse)
library(janitor)
library(skimr)
suppressMessages(library(dplyr))
suppressMessages(library(data.table))
suppressMessages(library(LaplacesDemon))
suppressMessages(library(ggplot2))
suppressMessages(library(ComplexHeatmap))
suppressMessages(library(igraph))
suppressMessages(library(PerformanceAnalytics))
suppressMessages(require(survival))
suppressMessages(require(survminer))
suppressMessages(require(phenoptr))
suppressMessages(source("/Users/seals/Desktop/CSPH/Jun9/alex_funcs.R"))
suppressMessages(source("/Users/seals/Desktop/CSPH/May4/density_finder.R"))
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
fig.width = 8,
fig.height = 6
)
theme_set(theme_bw() + theme(legend.position = "bottom"))
# Data Import
ci_data <- read_cell_seg_data("/Users/seals/Desktop/CSPH/Consolidated_data.txt/Merge_cell_seg_data_vectra.txt")
clinical_data <- read.csv("/Users/seals/Desktop/CSPH/Consolidated_data.txt/Lung_clinical.csv")
patients_less5 = clinical_data$PatientID[which(clinical_data$CK_HLADR_tumor<=5)]
patients_more5 = clinical_data$PatientID[which(clinical_data$CK_HLADR_tumor>5)]
#----------------------------------Cell Creation----------------------------------------------------------------------------------------------
summary_total_cells = ci_data %>%
group_by(Phenotype) %>%
summarise(total_cells = n())
knitr::kable(summary_total_cells)
ci_mean_exp = ci_data %>%
dplyr::select("PatientID",tag,"Sample Name","Tissue Category",
Phenotype,Confidence,"Category Region ID", "Cell ID",
"Entire Cell Area (square microns)",
"Entire Cell Compactness","Entire Cell Minor Axis",
"Entire Cell Major Axis","Entire Cell Axis Ratio",
grep("Entire Cell.*Mean",names(ci_data), value=TRUE),grep("Entire Cell.*Std Dev",names(ci_data), value=TRUE)) %>%
group_by("PatientID",tag,Phenotype,"Sample Name","Tissue Category","Category Region ID", "Cell ID") %>%
ungroup()
#names(lung_mean_exp)
ci_mean_exp = na.omit(ci_mean_exp)
colnames(ci_mean_exp)[which(colnames(ci_mean_exp)=="Phenotype")] = "Cell"
for(k in grep("Entire Cell.*Std Dev",names(ci_data), value=TRUE))
{
print(k)
print(mean(as.matrix(ci_mean_exp[,k]),na.rm = T))
}
lung_mean_exp = ci_mean_exp
summary_total_cells = lung_mean_exp %>%
group_by(PatientID,tag) %>%
summarise(total_cells = n())
check = (summary_total_cells)
findtags<-function(data){
s = r = NULL
for(i in unique(data$PatientID)){
s = data[data$PatientID==i,]$tag[which.max(data[data$PatientID==i,]$total_cells)]
r = rbind(r,lung_mean_exp[lung_mean_exp$tag == s,])
}
return(r)
}
#maxtags = findtags(check)
#lung_mean_exp = maxtags
#---------------------------------
chosen_covariates = c(14:20)
type1 = type2 = type3 = type4 = type5 = type6 = NULL
result = NULL
only_T_indices = which(lung_mean_exp$Cell %in% c("CK+"))
only_Stroma_indices = which(lung_mean_exp$`Tissue Category`=="Stroma")
only_Tumor_indices = which(lung_mean_exp$`Tissue Category`=="Tumor")
only_T_indices = intersect(only_T_indices, only_Tumor_indices)
#range_std_data = as.data.frame(apply(lung_mean_exp[only_Tumor_indices, chosen_covariates],2,range01))
#range_std_data = as.data.frame(apply(lung_mean_exp[only_Stroma_indices, chosen_covariates],2,range01))
range_std_data = as.data.frame(apply(lung_mean_exp[only_T_indices, chosen_covariates],2,range01))
#range_std_data = as.data.frame(apply(lung_mean_exp[, chosen_covariates],2,range01))
IRP_names = gsub(" ", "",gsub("\\s*\\([^\\)]+\\)","",
str_remove(str_remove(names(lung_mean_exp)[chosen_covariates], "Entire Cell"),"Mean")))
colnames(range_std_data)  = IRP_names
#range_std_data = cbind(lung_mean_exp[only_Tumor_indices,]$PatientID,range_std_data)
#range_std_data = cbind(lung_mean_exp[only_Stroma_indices,]$PatientID,range_std_data)
range_std_data = cbind(lung_mean_exp[only_T_indices,]$PatientID,range_std_data)
#range_std_data = cbind(lung_mean_exp$PatientID,range_std_data)
colnames(range_std_data)[1] = "SampleID"
all_patients = intersect(unique(range_std_data$SampleID),clinical_data$PatientID)
IRP_name = IRP_names[5]
PD1 = range_std_data[,c("SampleID", IRP_name)]
len_cov = 1
good_pats = NULL
which_image = 1
for(images in all_patients){
data_image = PD1[PD1$SampleID==images,]
x = NULL
m = NULL
for(i in 1:len_cov)
{
x[[i]] = na.omit(as.matrix(data_image[,2]))
chk = x[[i]]
m[[i]] = length(which(chk>0))
}
#if(!0 %in% unlist(m)){good_pats[[which_image]]=1}
if(unlist(m)>10){good_pats[[which_image]]=1}
else good_pats[[which_image]]=0
which_image = which_image+1
}
all_patients = all_patients[which(unlist(good_pats)!=0)]
sel_images = all_patients
#chosen_covariates = IRP_names
ngrids = 512
allones = rep(1, len_cov)
RParray_dens = array(NA, dim = c(length(sel_images), 2, ngrids))
x = m = NULL
pos_counts = matrix(0,length(sel_images),3)
which_images = 1
xvec = NULL
for(images in sel_images){
data_image = PD1[PD1$SampleID==images,]
for(i in 1:len_cov)
{
x[[i]] = na.omit(as.matrix(data_image[,2]))
m[[i]] = length(x[[i]][x[[i]]>0])
}
den = dens_univ(x, m = ngrids)
RParray_dens[which_images,1,] = den[[1]]
xvec[[which_images]] = x[[1]]
RParray_dens[which_images,2,] = den[[2]]
which_images = which_images + 1
}
num_images = length(sel_images)
rpd_mat = rpd_mat4 = matrix(0, num_images, num_images)
for( i in 1:num_images){
for(j in 1:num_images){
if(j > i){
rpd_mat4[i,j] <- jensen_shannon_dist(RParray_dens[i,1,], RParray_dens[j,1,])
}
}
}
rpd_mat = rpd_mat4
rpd_mat <- rpd_mat+t(rpd_mat)
colnames(rpd_mat) <- rownames(rpd_mat) <- sel_images
check_na_row = which(is.na(rpd_mat[,1])==T)
if(length(check_na_row)>0){
rpd_mat <- rpd_mat[-check_na_row,-check_na_row]}
rpd_mat2 <- rpd_mat
rpd_mat2[rpd_mat2>quantile(rpd_mat,0.95)] <- quantile(rpd_mat,0.95)
rpd_mat2 <- rpd_mat2/max(rpd_mat2)
hier_clustering <- hclust(as.dist(rpd_mat2), method="ward.D")
hier_groups <- cutree(hier_clustering, k=2)
hier_groups <- as.matrix(hier_groups)
#write.csv(hier_groups, "/Users/seals/Desktop/CSPH/Jun9/VectraSpatial/Divergence_analysis/HLADR_class.csv")
#wtf = intersect(rownames(hier_groups)[which(hier_groups==1)], patients_less5)
#wtf = (rownames(hier_groups)[which(hier_groups==2)])
RP_dens = as.data.frame(RParray_dens[,1,])
colnames(RP_dens) = paste0("x",1:ngrids)
RP_dens = cbind(sel_images,hier_groups,RP_dens)
colnames(RP_dens)[1:2] = c("Image_num", "Clus_group")
RP_dens_wide = reshape2::melt(RP_dens, id.vars = c("Image_num", "Clus_group"))
RP_dens_wide = RP_dens_wide[order(RP_dens_wide$Image_num),]
RP_dens_wide = cbind(RP_dens_wide, rep(RParray_dens[1,2,],length(sel_images)))
RP_dens_wide$Clus_group = as.factor(RP_dens_wide$Clus_group)
colnames(RP_dens_wide)[5] = "Expression Value"
colnames(RP_dens_wide)[2] = "Cluster:"
colnames(RP_dens_wide)[4] = "Count"
RP_dens_wide_pruned = RP_dens_wide[RP_dens_wide$`Expression Value`<=0.25,]
p1 = ggplot(RP_dens_wide_pruned,aes(x=`Expression Value`, y = Count, alpha = 0.0005)) +
#geom_point(aes(x=`Expression Value`, y = Count, color = `Cluster:`)) +
geom_line(aes(color = `Cluster:`, group = Image_num), alpha=0.2)+
ggtitle("Patient specific densities")+ guides(colour = guide_legend(override.aes = list(alpha=1)))
p1
RP_dens_mean1 = RP_dens[RP_dens$Clus_group==1,]
RP_dens_mean2 = RP_dens[RP_dens$Clus_group==2,]
RPM1 = colMeans(RP_dens_mean1[,-1])
RPM2 = colMeans(RP_dens_mean2[,-1])
RPFM = as.data.frame(rbind(RPM1, RPM2))
RPFM_wide = reshape2::melt(RPFM, id.vars = "Clus_group")
RPFM_wide = cbind(RPFM_wide[order(RPFM_wide$Clus_group),],  rep(RParray_dens[1,2,],2))
#RPFM_wide$value = RPFM_wide$value/max(RPFM_wide$value)
RPFM_wide$Clus_group = as.factor(RPFM_wide$Clus_group)
colnames(RPFM_wide)[4] = "Expression Value"
colnames(RPFM_wide)[1] = "Cluster:"
colnames(RPFM_wide)[3] = "Count"
RPFM_wide_pruned = RPFM_wide[RPFM_wide$`Expression Value`<=0.25,]
p = ggplot(RPFM_wide_pruned, aes(x=`Expression Value`, y = Count, color = `Cluster:`)) +
geom_line()+ggtitle("Mean densities")
print(p)
exp(sqrt(0.38))
exp(sqrt(0.8))
require(DenVar)
require(LaplacesDemon)
require(pheatmap)
require(ggplot2)
require(survminer)
require(coxme)
setwd("/Users/seals/Documents/GitHub/DenVar")
devtools::document()
devtools::install_github('sealx017/DenVar')
require(DenVar)
require(LaplacesDemon)
require(pheatmap)
require(ggplot2)
require(survminer)
require(coxme)
DenVar::Array_KDE
devtools::document()
setwd("/Users/seals/Documents/GitHub/DenVar")
#devtools::create("DenVar")
devtools::document()
DenVar::Array_KDE
devtools::document()
KMplot
KMplot()
KMplot(ggsobj, summary(res.cox)$conf.int[2], summary(res.cox)$coefficients[5])
devtools::document()
suppressMessages(library(dplyr))
suppressMessages(library(data.table))
suppressMessages(library(LaplacesDemon))
suppressMessages(library(ggplot2))
suppressMessages(library(ComplexHeatmap))
suppressMessages(library(igraph))
suppressMessages(library(PerformanceAnalytics))
suppressMessages(require(survival))
suppressMessages(require(survminer))
suppressMessages(source("/Users/seals/Desktop/CSPH/Jun9/alex_funcs.R"))
suppressMessages(source("/Users/seals/Desktop/CSPH/May4/density_finder.R"))
my_working_dir = '/Users/seals/Desktop/Debashish_data'
python_path = "/usr/bin/python"
cell_data = read.csv(paste0(my_working_dir,"/TNBC_shareCellData/cellData.csv"))
p_status = read.csv(paste0(my_working_dir,"/TNBC_shareCellData/patient_class.csv"),header = F)
clinical_data = readxl::read_excel(paste0(my_working_dir,"/TNBC_shareCellData/tnbc_clinical.xlsx"),col_names = T,skip = 1)
recur_data = read.csv("/Users/seals/Downloads/rasp-mibi-main/rawdata/clinical_data.csv")
groups = c("Unidentified", "Immune", "Endothelial", "Mesenchymal-like", "Tumor", "Keratin-positive tumor")
cell_data$Group = as.factor(cell_data$Group)
levels(cell_data$Group) <- groups
marker_names = names(cell_data)[4:52]
cell_data = na.omit(cell_data)
IRP_names = c("PD1", "PD.L1", "Lag3", "IDO", "HLA.DR", "Keratin6")
groups_pruned = c("Immune")
#groups_pruned = c("Tumor","Keratin-positive tumor")
immune_group_names = c("Tregs", "CD4 T", "CD8 T", "CD3 T", "NK", "B", "Neutrophils", "Macrophages", "DC","DC/Mono", "Mono/Neu", "Other immune")
group_covariate_names = c("SampleID","Group","immuneGroup")
selected_data = cell_data[cell_data$Group %in% groups_pruned,c(group_covariate_names, IRP_names)]
#selected_data = cell_data[,c(group_covariate_names, IRP_names)]
range_std_data =  selected_data
range_std_data[,IRP_names] = apply(selected_data[,IRP_names],2,range01)
all_patients = intersect(unique(selected_data$SampleID),clinical_data$InternalId)
p_status_noncold = p_status[p_status$V2!=2,]
IRP_name = IRP_names[1]
all_patients = intersect(all_patients,p_status_noncold$V1)
PD1 = range_std_data[,c("SampleID", IRP_name)]
write.csv(PD1[PD1$SampleID %in% all_patients,], "/Users/seals/Documents/GitHub/DenVar/Data/PD1_TNBC_MIBI.csv")
PD1 = PD1[PD1$SampleID %in% all_patients,]
len_cov = 1
good_pats = NULL
which_image = 1
for(images in all_patients){
data_image = PD1[PD1$SampleID==images,]
x = NULL
m = NULL
for(i in 1:len_cov)
{
x[[i]] = na.omit(as.matrix(data_image[,2]))
chk = x[[i]]
m[[i]] = length(which(chk>0))
}
#if(!0 %in% unlist(m)){good_pats[[which_image]]=1}
#print(unlist(m))
print(dim(data_image)[1])
if(unlist(m)> -4){good_pats[[which_image]]=1}
else good_pats[[which_image]]=0
which_image = which_image+1
}
all_patients = all_patients[which(unlist(good_pats)!=0)]
sel_images = as.numeric(all_patients)
#chosen_covariates = IRP_names
KMplot
devtools::document()
