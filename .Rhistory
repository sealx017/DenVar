citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation("/Users/seals/Documents/GitHub/DenVar/ref.bib")
citr:::insert_citation()
remotes::install_github('rstudio/rmarkdown')
setwd("/Users/seals/Documents/GitHub/DenVar")
#setwd("[@keren2018structured]")
#devtools::create("DenVar")
devtools::document()
require(DenVar)
require(LaplacesDemon)
require(pheatmap)
require(ggplot2)
require(survival)
require(survminer)
require(coxme)
devtools::install_github('sealx017/DenVar')
install.packages("coxme")
require(DenVar)
require(LaplacesDemon)
require(pheatmap)
require(ggplot2)
require(survival)
require(survminer)
require(coxme)
PD1_data = read.csv("Data/PD1_TNBC_MIBI.csv")[,-1]
clinical_data = read.csv("Data/Survival_TNBC_MIBI.csv")[,-1]
KDE_of_all = Array_KDE(Data = PD1_data, ngrids = 1024)
?Array_KDE
??Array_KDE
devtools::install_github('sealx017/DenVar')
require(DenVar)
KDE_of_all = Array_KDE(Data = PD1_data, ngrids = 1024)
document()
devtools::document()
devtools::document()
devtools::install_github('sealx017/DenVar')
require(DenVar)
require(LaplacesDemon)
require(pheatmap)
require(ggplot2)
require(survival)
require(survminer)
require(coxme)
PD1_data = read.csv("Data/PD1_TNBC_MIBI.csv")[,-1]
clinical_data = read.csv("Data/Survival_TNBC_MIBI.csv")[,-1]
KDE_of_all = Array_KDE(Data = PD1_data, ngrids = 1024)
PD1_data
which(PD1_data$PD1>0)
KDE_of_all = Array_KDE(Data = PD1_data$PD1, ngrids = 1024)
Data = PD1_data
head(Data)
sel_images = unique(Data$SampleID)
Array_dens = array(NA, dim = c(length(sel_images), 2, ngrids))
ngris = 1024
Array_dens = array(NA, dim = c(length(sel_images), 2, ngrids))
ngrids = 1024
Array_dens = array(NA, dim = c(length(sel_images), 2, ngrids))
x = NULL
which_images = 1
len_cov = 1
for(images in sel_images){
data_image = Data[Data$SampleID==images,]
for(i in 1:len_cov)
{
x[[i]] = na.omit(as.matrix(data_image[,2]))
}
den = dens_univ(x, ngrids = ngrids)
Array_dens[which_images,1,] = den[[1]]
Array_dens[which_images,2,] = den[[2]]
which_images = which_images + 1
}
x
len(x)
length(x)
x[[1]]
sel_images = unique(Data$SampleID)
Array_dens = array(NA, dim = c(length(sel_images), 2, ngrids))
x = NULL
which_images = 1
#len_cov = 1
for(images in sel_images){
data_image = Data[Data$SampleID==images,]
#for(i in 1:len_cov)
#{
x = na.omit(as.matrix(data_image[,2]))
#}
den = dens_univ(x, ngrids = ngrids)
Array_dens[which_images,1,] = den[[1]]
Array_dens[which_images,2,] = den[[2]]
which_images = which_images + 1
}
x
min_coef = 0
max_coef = 1
den = matrix(0, nrow = 1, ncol = ngrids)
den_grid = matrix(0, nrow = 1, ncol = ngrids)
x = list(x)
for(i in 1:ngrids){
temp_vec = c(x[[i]][!is.na(x[[i]])])
if(length(temp_vec)==0){
den[i,] = rep(0,ngrids)
}
else{
if(range(temp_vec)[1]==range(temp_vec)[2]){
den[i,1] = 1
}
else if(length(temp_vec)<5){
s = density(temp_vec, from = min_coef, to = max_coef,
n = ngrids, bw = mean(range(temp_vec)))
den[i,] = s$y
den_grid[i,] = s$x
}
else{
s = density(temp_vec, from = min_coef, to = max_coef,
n = ngrids, bw='nrd0')
den[i,] = s$y
den_grid[i,] = s$x
}}}
x
i
dens_univ = function(x, ngrids = 1024){
min_coef = 0
max_coef = 1
den = matrix(0, nrow = 1, ncol = ngrids)
den_grid = matrix(0, nrow = 1, ncol = ngrids)
#x = list(x)
for(i in 1:ngrids){
#temp_vec = c(x[[i]][!is.na(x[[i]])])
temp_vec = c(x[!is.na(x)])
if(length(temp_vec)==0){
den[i,] = rep(0,ngrids)
}
else{
if(range(temp_vec)[1]==range(temp_vec)[2]){
den[i,1] = 1
}
else if(length(temp_vec)<5){
s = density(temp_vec, from = min_coef, to = max_coef,
n = ngrids, bw = mean(range(temp_vec)))
den[i,] = s$y
den_grid[i,] = s$x
}
else{
s = density(temp_vec, from = min_coef, to = max_coef,
n = ngrids, bw='nrd0')
den[i,] = s$y
den_grid[i,] = s$x
}}}
return(list(den, den_grid))
}
#' @export
jensen_shannon_dist = function(px,py){
px = px/sum(px); py = py/sum(py);
px[which(px < .Machine$double.xmin)] <- .Machine$double.xmin
py[which(py < .Machine$double.xmin)] <- .Machine$double.xmin
pmean = 1/2*(px + py)
JSD = sqrt(KLD(px, pmean)$sum.KLD.px.py + KLD(py, pmean)$sum.KLD.px.py)
return(JSD)
}
sel_images = unique(Data$SampleID)
Array_dens = array(NA, dim = c(length(sel_images), 2, ngrids))
x = NULL
which_images = 1
#len_cov = 1
for(images in sel_images){
data_image = Data[Data$SampleID==images,]
#for(i in 1:len_cov)
#{
x = na.omit(as.matrix(data_image[,2]))
#}
den = dens_univ(x, ngrids = ngrids)
Array_dens[which_images,1,] = den[[1]]
Array_dens[which_images,2,] = den[[2]]
which_images = which_images + 1
}
min_coef = 0
max_coef = 1
den = matrix(0, nrow = 1, ncol = ngrids)
den_grid = matrix(0, nrow = 1, ncol = ngrids)
x
#temp_vec = c(x[[i]][!is.na(x[[i]])])
temp_vec = c(x[!is.na(x)])
s = density(temp_vec, from = min_coef, to = max_coef,
n = ngrids, bw='nrd0')
den[i,] = s$y
den = s$y
den_grid = s$x
dens_univ = function(x, ngrids = 1024){
min_coef = 0
max_coef = 1
den = matrix(0, nrow = 1, ncol = ngrids)
den_grid = matrix(0, nrow = 1, ncol = ngrids)
#x = list(x)
for(i in 1:ngrids){
#temp_vec = c(x[[i]][!is.na(x[[i]])])
temp_vec = c(x[!is.na(x)])
if(length(temp_vec)==0){
den = rep(0,ngrids)
}
else{
if(range(temp_vec)[1]==range(temp_vec)[2]){
den = 1
}
else if(length(temp_vec)<5){
s = density(temp_vec, from = min_coef, to = max_coef,
n = ngrids, bw = mean(range(temp_vec)))
den = s$y
den_grid = s$x
}
else{
s = density(temp_vec, from = min_coef, to = max_coef,
n = ngrids, bw='nrd0')
den = s$y
den_grid = s$x
}}}
return(list(den, den_grid))
}
sel_images = unique(Data$SampleID)
Array_dens = array(NA, dim = c(length(sel_images), 2, ngrids))
x = NULL
which_images = 1
#len_cov = 1
for(images in sel_images){
data_image = Data[Data$SampleID==images,]
#for(i in 1:len_cov)
#{
x = na.omit(as.matrix(data_image[,2]))
#}
den = dens_univ(x, ngrids = ngrids)
Array_dens[which_images,1,] = den[[1]]
Array_dens[which_images,2,] = den[[2]]
which_images = which_images + 1
}
Array_KDE = function(Data, ngrids = 1024){
sel_images = unique(Data$SampleID)
Array_dens = array(NA, dim = c(length(sel_images), 2, ngrids))
x = NULL
which_images = 1
#len_cov = 1
for(images in sel_images){
data_image = Data[Data$SampleID==images,]
#for(i in 1:len_cov)
#{
x = na.omit(as.matrix(data_image[,2]))
#}
den = dens_univ(x, ngrids = ngrids)
Array_dens[which_images,1,] = den[[1]]
Array_dens[which_images,2,] = den[[2]]
which_images = which_images + 1
}
return(Array_dens)
}
KDE_of_all = Array_KDE(Data = PD1_data, ngrids = 1024)
JSD_matrix_between_all = JSD_matrix(Array_dens = KDE_of_all, Data = PD1_data)
surv = cbind(clinical_data, hier_groups)
hier_clustering = hclust(as.dist(JSD_matrix_between_all), method="ward.D")
hier_groups = as.data.frame(cutree(hier_clustering, k=2)); colnames(hier_groups) = "Cluster"
surv = cbind(clinical_data, hier_groups)
coxplot = coxPH_plot(surv)
coxplot
clinical_data
clinical_data$Censored = ifelse(clinical_data$Censored==2, 0, 1)
surv = cbind(clinical_data, hier_groups)
coxplot = coxPH_plot(surv)
coxplot
res.coxme = coxme_model(surv, JSD_matrix_between_all)
print(res.coxme)
clinical_data = read.csv("Data/clinical_data_TNBC_MIBI.csv")[,-1]
head(clinical_data)
dim(PD1_data)
dim(clinical_data)
length(PD1_data$SampleID)
length(unique(PD1_data$SampleID))
clinical_data = read.csv("Data/clinical_data_TNBC_MIBI.csv")
clinical_data
PD1_data = read.csv("Data/Marker_data_TNBC_MIBI.csv")
head(PD1_data)
dim(PD1_data)
clinical_data = read.csv("Data/clinical_data_TNBC_MIBI.csv")
head(clinical_data)
unique(PD1_data$SampleID)
length(unique(PD1_data$SampleID))
PD1_data = read.csv("Data/Marker_data_TNBC_MIBI.csv")
dim(PD1_data)
head(PD1_data)
PD1_data = read.csv("Data/Marker_data_TNBC_MIBI.csv")
clinical_data = read.csv("Data/clinical_data_TNBC_MIBI.csv")
head(PD1_data)
KDE_of_all = Array_KDE(Data = PD1_data[,1:2], ngrids = 1024)
JSD_matrix_between_all = JSD_matrix(Array_dens = KDE_of_all, Data = PD1_data)
PD1_data[,1:2]
dim(PD1_data[,1:2])
KDE_of_all = Array_KDE(Data = PD1_data[,1:2], ngrids = 1024)
KDE_of_all = Array_KDE(Data = PD1_data[,1:2], ngrids = 1024)
KDE_of_all
JSD_matrix_between_all = JSD_matrix(Array_dens = KDE_of_all, Data = PD1_data)
dim(KDE_of_all)
dens_univ = function(x, ngrids = 1024){
min_coef = 0
max_coef = 1
den = matrix(0, nrow = 1, ncol = ngrids)
den_grid = matrix(0, nrow = 1, ncol = ngrids)
#x = list(x)
for(i in 1:ngrids){
#temp_vec = c(x[[i]][!is.na(x[[i]])])
temp_vec = c(x[!is.na(x)])
if(length(temp_vec)==0){
den = rep(0,ngrids)
}
else{
if(range(temp_vec)[1]==range(temp_vec)[2]){
den = 1
}
else if(length(temp_vec)<5){
s = density(temp_vec, from = min_coef, to = max_coef,
n = ngrids, bw = mean(range(temp_vec)))
den = s$y
den_grid = s$x
}
else{
s = density(temp_vec, from = min_coef, to = max_coef,
n = ngrids, bw='nrd0')
den = s$y
den_grid = s$x
}}}
return(list(den, den_grid))
}
#' @export
jensen_shannon_dist = function(px,py){
px = px/sum(px); py = py/sum(py);
px[which(px < .Machine$double.xmin)] <- .Machine$double.xmin
py[which(py < .Machine$double.xmin)] <- .Machine$double.xmin
pmean = 1/2*(px + py)
JSD = sqrt(KLD(px, pmean)$sum.KLD.px.py + KLD(py, pmean)$sum.KLD.px.py)
return(JSD)
}
#' @export
Array_KDE = function(Data, ngrids = 1024){
sel_images = unique(Data$ID)
Array_dens = array(NA, dim = c(length(sel_images), 2, ngrids))
x = NULL
which_images = 1
#len_cov = 1
for(images in sel_images){
data_image = Data[Data$ID==images,]
#for(i in 1:len_cov)
#{
x = na.omit(as.matrix(data_image[,2]))
#}
den = dens_univ(x, ngrids = ngrids)
Array_dens[which_images,1,] = den[[1]]
Array_dens[which_images,2,] = den[[2]]
which_images = which_images + 1
}
return(Array_dens)
}
#' @export
JSD_matrix = function(Array_dens, Data){
sel_images = unique(Data$ID)
num_images = dim(Array_dens[,1,])[1]
rpd_mat = matrix(0, num_images, num_images)
for( i in 1:num_images){
for(j in 1:num_images){
if(j > i){
rpd_mat[i,j] <- jensen_shannon_dist(Array_dens[i,1,], Array_dens[j,1,])
}
}
}
rpd_mat <- rpd_mat+t(rpd_mat)
colnames(rpd_mat) <- rownames(rpd_mat) <- sel_images
check_na_row = which(is.na(rpd_mat[,1])==T)
if(length(check_na_row)>0){
rpd_mat <- rpd_mat[-check_na_row,-check_na_row]}
rpd_mat2 <- rpd_mat
rpd_mat2[rpd_mat2>quantile(rpd_mat,0.95)] <- quantile(rpd_mat,0.95)
JSD_matrix <- rpd_mat2/max(rpd_mat2)
return(JSD_matrix)
}
KDE_of_all = Array_KDE(Data = PD1_data[,1:2], ngrids = 1024)
JSD_matrix_between_all = JSD_matrix(Array_dens = KDE_of_all, Data = PD1_data)
print(pheatmap(JSD_matrix_between_all, cluster_rows = TRUE,
cluster_cols = TRUE,show_colnames = T, show_rownames = T,treeheight_row=0,treeheight_col = 0))
hier_clustering = hclust(as.dist(JSD_matrix_between_all), method="ward.D")
hier_groups = as.data.frame(cutree(hier_clustering, k=2)); colnames(hier_groups) = "Cluster"
surv = cbind(clinical_data, hier_groups)
PD1_data = read.csv("Data/Marker_data_TNBC_MIBI.csv")
clinical_data = read.csv("Data/clinical_data_TNBC_MIBI.csv")
dim(PD1_data)
dim(clinical_data)
head(clinical_data)
head(PD1_data)
KDE_of_all = Array_KDE(Data = PD1_data[,1:2], ngrids = 1024)
JSD_matrix_between_all = JSD_matrix(Array_dens = KDE_of_all, Data = PD1_data)
print(pheatmap(JSD_matrix_between_all, cluster_rows = TRUE,
cluster_cols = TRUE,show_colnames = T, show_rownames = T,treeheight_row=0,treeheight_col = 0))
hier_clustering = hclust(as.dist(JSD_matrix_between_all), method="ward.D")
hier_groups = as.data.frame(cutree(hier_clustering, k=2)); colnames(hier_groups) = "Cluster"
surv = cbind(clinical_data, hier_groups)
coxplot = coxPH_plot(surv)
clinical_data
surv
surv = cbind(clinical_data[,c(1:3)], hier_groups)
head(surv)
surv = cbind(clinical_data[,c(1:3)], hier_groups)
colnames(surv)[2:3] = c("Censored", "TIme")
print(head(surv))
surv = cbind(clinical_data[,c(1:3)], hier_groups)
colnames(surv)[2:3] = c("Censored", "Time")
print(head(surv))
KMplot<-function(ggsurvobject, HR, pval)
{
print(ggsurvobject$plot + ggplot2::annotate(
"text",
x = Inf, y = Inf,
vjust = 1, hjust = 1,
label = paste0("HR = ", round(HR, 4), "\n p < ", round(pval,4)),
size = 5))
}
#' @export
coxPH_plot = function(surv, name = "Non-recurrence probability"){
ggsobj <- ggsurvplot(fit = survminer::surv_fit(Surv(Time,Censored) ~ Cluster, data = surv),
xlab = Time, ylab = name,risk.table = T)
res.cox<-coxph(Surv(Time,Censored) ~ Cluster, data = surv)
p1 <- KMplot(ggsobj, summary(res.cox)$conf.int[2], summary(res.cox)$coefficients[5])
#print(p1)
return(list(plot = p1, HR = summary(res.cox)$conf.int[2], pvalue = summary(res.cox)$coefficients[5]))
}
#' @export
coxme_model = function(surv, JSD_mat){
exp_dist = exp(-JSD_mat)
res.coxme<-coxme(Surv(Time,Censored) ~ (1|SampleID), data = surv,
varlist = coxmeMlist(list(exp_dist),rescale = FALSE,
pdcheck = TRUE, positive = TRUE))
LRT <- 2*(res.coxme$loglik[2] - res.coxme$loglik[1])
LRT_pvalue <- 1-pchisq(LRT,1)
return(list(Variance_estimate = res.coxme$vcoef, LRT = LRT, LRT_pvalue = LRT_pvalue))
}
coxplot = coxPH_plot(surv, name = "Non-recurrence probability")
surv$Time
coxPH_plot = function(surv, name = "Non-recurrence probability"){
ggsobj <- ggsurvplot(fit = survminer::surv_fit(Surv(Time,Censored) ~ Cluster, data = surv),
xlab = Time, ylab = name,risk.table = T)
res.cox<-coxph(Surv(Time,Censored) ~ Cluster, data = surv)
p1 <- KMplot(ggsobj, summary(res.cox)$conf.int[2], summary(res.cox)$coefficients[5])
#print(p1)
return(list(plot = p1, HR = summary(res.cox)$conf.int[2], pvalue = summary(res.cox)$coefficients[5]))
}
surv
coxplot = coxPH_plot(surv, name = "Non-recurrence probability")
ggsobj <- ggsurvplot(fit = survminer::surv_fit(Surv(Time,Censored) ~ Cluster, data = surv),
xlab = Time, ylab = name,risk.table = T)
coxPH_plot = function(surv, name = "Non-recurrence probability"){
ggsobj <- ggsurvplot(fit = survminer::surv_fit(Surv(Time,Censored) ~ Cluster, data = surv),
xlab = "Time", ylab = name, risk.table = T)
res.cox<-coxph(Surv(Time,Censored) ~ Cluster, data = surv)
p1 <- KMplot(ggsobj, summary(res.cox)$conf.int[2], summary(res.cox)$coefficients[5])
#print(p1)
return(list(plot = p1, HR = summary(res.cox)$conf.int[2], pvalue = summary(res.cox)$coefficients[5]))
}
coxplot = coxPH_plot(surv, name = "Non-recurrence probability")
print(coxplot$plot)
res.coxme = coxme_model(surv, JSD_matrix_between_all)
coxme_model = function(surv, JSD_mat){
exp_dist = exp(-JSD_mat)
res.coxme<-coxme(Surv(Time,Censored) ~ (1|ID), data = surv,
varlist = coxmeMlist(list(exp_dist),rescale = FALSE,
pdcheck = TRUE, positive = TRUE))
LRT <- 2*(res.coxme$loglik[2] - res.coxme$loglik[1])
LRT_pvalue <- 1-pchisq(LRT,1)
return(list(Variance_estimate = res.coxme$vcoef, LRT = LRT, LRT_pvalue = LRT_pvalue))
}
res.coxme = coxme_model(surv, JSD_matrix_between_all)
print(res.coxme)
surv = cbind(clinical_data[,c(4:5)], hier_groups)
colnames(surv)[2:3] = c("Censored", "Time")
print(head(surv))
coxplot = coxPH_plot(surv, name = "Survival probability")
surv = cbind(clinical_data[,c(1, 4:5)], hier_groups)
colnames(surv)[2:3] = c("Censored", "Time")
print(head(surv))
coxplot = coxPH_plot(surv, name = "Survival probability")
print(coxplot$plot)
res.coxme = coxme_model(surv, JSD_matrix_between_all)
print(res.coxme)
document()
devtools::document()
devtools::document()
devtools::install_github('sealx017/DenVar')
require(DenVar)
require(LaplacesDemon)
require(pheatmap)
require(ggplot2)
require(survival)
require(survminer)
require(coxme)
PD1_data = read.csv("Data/Marker_data_TNBC_MIBI.csv")
clinical_data = read.csv("Data/clinical_data_TNBC_MIBI.csv")
#clinical_data$Censored = ifelse(clinical_data$Censored==2, 0, 1)
KDE_of_all = Array_KDE(Data = PD1_data, ngrids = 1024)
JSD_matrix_between_all = JSD_matrix(Array_dens = KDE_of_all, Data = PD1_data)
print(pheatmap(JSD_matrix_between_all, cluster_rows = TRUE,
cluster_cols = TRUE,show_colnames = T, show_rownames = T,treeheight_row=0,treeheight_col = 0))
hier_clustering = hclust(as.dist(JSD_matrix_between_all), method="ward.D")
hier_groups = as.data.frame(cutree(hier_clustering, k=2)); colnames(hier_groups) = "Cluster"
surv = cbind(clinical_data[,c(1:3)], hier_groups)
colnames(surv)[2:3] = c("Censored", "Time")
print(head(surv))
coxplot = coxPH_plot(surv, name = "Non-recurrence probability")
print(coxplot$plot)
devtools::document()
devtools::install_github('sealx017/DenVar')
