getwd()
setwd("/Users/seals/Documents/GitHub/")
devtools::create("DenVar")
suppressMessages(library(dplyr))
suppressMessages(library(data.table))
suppressMessages(library(LaplacesDemon))
suppressMessages(library(ggplot2))
suppressMessages(library(ComplexHeatmap))
suppressMessages(library(igraph))
suppressMessages(library(PerformanceAnalytics))
suppressMessages(require(survival))
suppressMessages(require(survminer))
suppressMessages(source("/Users/seals/Desktop/CSPH/Jun9/alex_funcs.R"))
suppressMessages(source("/Users/seals/Desktop/CSPH/May4/density_finder.R"))
my_working_dir = '/Users/seals/Desktop/Debashish_data'
python_path = "/usr/bin/python"
cell_data = read.csv(paste0(my_working_dir,"/TNBC_shareCellData/cellData.csv"))
p_status = read.csv(paste0(my_working_dir,"/TNBC_shareCellData/patient_class.csv"),header = F)
clinical_data = readxl::read_excel(paste0(my_working_dir,"/TNBC_shareCellData/tnbc_clinical.xlsx"),col_names = T,skip = 1)
recur_data = read.csv("/Users/seals/Downloads/rasp-mibi-main/rawdata/clinical_data.csv")
groups = c("Unidentified", "Immune", "Endothelial", "Mesenchymal-like", "Tumor", "Keratin-positive tumor")
cell_data$Group = as.factor(cell_data$Group)
levels(cell_data$Group) <- groups
marker_names = names(cell_data)[4:52]
cell_data = na.omit(cell_data)
IRP_names = c("PD1", "PD.L1", "Lag3", "IDO", "HLA.DR", "Keratin6")
groups_pruned = c("Immune")
#groups_pruned = c("Tumor","Keratin-positive tumor")
immune_group_names = c("Tregs", "CD4 T", "CD8 T", "CD3 T", "NK", "B", "Neutrophils", "Macrophages", "DC","DC/Mono", "Mono/Neu", "Other immune")
group_covariate_names = c("SampleID","Group","immuneGroup")
selected_data = cell_data[cell_data$Group %in% groups_pruned,c(group_covariate_names, IRP_names)]
#selected_data = cell_data[,c(group_covariate_names, IRP_names)]
range_std_data =  selected_data
range_std_data[,IRP_names] = apply(selected_data[,IRP_names],2,range01)
all_patients = intersect(unique(selected_data$SampleID),clinical_data$InternalId)
p_status_noncold = p_status[p_status$V2!=2,]
IRP_name = IRP_names[1]
all_patients = intersect(all_patients,p_status_noncold$V1)
PD1 = range_std_data[,c("SampleID", IRP_name)]
len_cov = 1
good_pats = NULL
which_image = 1
dim(PD1)
head(PD1)
hist(PD1)
hist(PD1[,2])
for(images in all_patients){
data_image = PD1[PD1$SampleID==images,]
x = NULL
m = NULL
for(i in 1:len_cov)
{
x[[i]] = na.omit(as.matrix(data_image[,2]))
chk = x[[i]]
m[[i]] = length(which(chk>0))
}
#if(!0 %in% unlist(m)){good_pats[[which_image]]=1}
#print(unlist(m))
print(dim(data_image)[1])
if(unlist(m)> -4){good_pats[[which_image]]=1}
else good_pats[[which_image]]=0
which_image = which_image+1
}
all_patients = all_patients[which(unlist(good_pats)!=0)]
sel_images = as.numeric(all_patients)
write.csv(PD1, "/Users/seals/Documents/GitHub/Data/PD1_TNBC_MIBI.csv")
write.csv(PD1, "/Users/seals/Documents/GitHub/DenVar/Data/PD1_TNBC_MIBI.csv")
len_cov = 1
good_pats = NULL
which_image = 1
for(images in all_patients){
data_image = PD1[PD1$SampleID==images,]
x = NULL
m = NULL
for(i in 1:len_cov)
{
x[[i]] = na.omit(as.matrix(data_image[,2]))
chk = x[[i]]
m[[i]] = length(which(chk>0))
}
#if(!0 %in% unlist(m)){good_pats[[which_image]]=1}
#print(unlist(m))
print(dim(data_image)[1])
if(unlist(m)> -4){good_pats[[which_image]]=1}
else good_pats[[which_image]]=0
which_image = which_image+1
}
all_patients = all_patients[which(unlist(good_pats)!=0)]
sel_images = as.numeric(all_patients)
#chosen_covariates = IRP_names
allones = rep(1, len_cov)
RParray_dens = array(NA, dim = c(length(sel_images), 2, ngrids))
x = m = NULL
pos_counts = matrix(0,length(sel_images),3)
which_images = 1
xvec = NULL
for(images in sel_images){
data_image = PD1[PD1$SampleID==images,]
for(i in 1:len_cov)
{
x[[i]] = na.omit(as.matrix(data_image[,2]))
m[[i]] = length(x[[i]][x[[i]]>0])
}
if(unlist(m)< -5){
RParray_dens[which_images,1,] =  c(1, rep(0, (length(ngrids)-1)))
xvec[[which_images]] = x[[1]]
RParray_dens[which_images,2,] = seq(0,1,length.out = ngrids)
}
else{
den = dens_univ(x, m = ngrids)
RParray_dens[which_images,1,] = den[[1]]
xvec[[which_images]] = x[[1]]
RParray_dens[which_images,2,] = den[[2]]
}
which_images = which_images + 1
}
ngrids = 1024
allones = rep(1, len_cov)
RParray_dens = array(NA, dim = c(length(sel_images), 2, ngrids))
x = m = NULL
pos_counts = matrix(0,length(sel_images),3)
which_images = 1
xvec = NULL
for(images in sel_images){
data_image = PD1[PD1$SampleID==images,]
for(i in 1:len_cov)
{
x[[i]] = na.omit(as.matrix(data_image[,2]))
m[[i]] = length(x[[i]][x[[i]]>0])
}
if(unlist(m)< -5){
RParray_dens[which_images,1,] =  c(1, rep(0, (length(ngrids)-1)))
xvec[[which_images]] = x[[1]]
RParray_dens[which_images,2,] = seq(0,1,length.out = ngrids)
}
else{
den = dens_univ(x, m = ngrids)
RParray_dens[which_images,1,] = den[[1]]
xvec[[which_images]] = x[[1]]
RParray_dens[which_images,2,] = den[[2]]
}
which_images = which_images + 1
}
num_images = length(sel_images)
rpd_mat = rpd_mat4 = matrix(0, num_images, num_images)
for( i in 1:num_images){
for(j in 1:num_images){
if(j > i){
rpd_mat[i,j] <- jensen_shannon_dist_scaled(RParray_dens[i,1,], RParray_dens[j,1,])
#rpd_mat[i,j] <- jensen_shannon_dist_manual(xvec[[i]], xvec[[j]])
#rpd_mat[i,j] <- jensen_shannon_dist_manual_kdensity(xvec[[i]], xvec[[j]],ngrids = ngrids)
}
}
}
rpd_mat <- rpd_mat+t(rpd_mat)
colnames(rpd_mat) <- rownames(rpd_mat) <- sel_images
check_na_row = which(is.na(rpd_mat[,1])==T)
if(length(check_na_row)>0){
rpd_mat <- rpd_mat[-check_na_row,-check_na_row]}
rpd_mat2 <- rpd_mat
rpd_mat2[rpd_mat2>quantile(rpd_mat,0.95)] <- quantile(rpd_mat,0.95)
rpd_mat2 <- rpd_mat2/max(rpd_mat2)
#png(paste0("/Users/seals/Desktop/CSPH/Jun9/MIBI_pipeline/Diveregence_analysis/",IRP_name,"/n_heatmap_of_JSDs_with_n_", ngrids,".png"),
#    width = 800, height = 800, units = "px", res = 150)
#p0 <- pheatmap::pheatmap(rpd_mat2, cluster_rows = TRUE,
# cluster_cols = TRUE,show_colnames = T, show_rownames = T,treeheight_row=0,treeheight_col = 0)
#print(p0)
#dev.off()
hier_clustering <- hclust(as.dist(rpd_mat2), method="ward.D")
hier_groups <- cutree(hier_clustering, k=2)
hier_groups <- as.matrix(hier_groups)
surv_mat <- clinical_data[,c("InternalId", "Survival_days_capped*")]
surv_mat <- na.omit(clinical_data[,c("InternalId", "Survival_days_capped*", "Censored")])
surv_mat$Censored <- 1+surv_mat$Censored
new_vec <- cbind(as.matrix(surv_mat$`Survival_days_capped*`),
as.matrix(surv_mat$`Censored`))
rownames(new_vec) <- surv_mat$InternalId
new_vec <- as.data.frame(new_vec)
new_vec$binary_surv <- as.integer(surv_mat$`Survival_days_capped*`>mean(surv_mat$`Survival_days_capped*`, na.rm = T))
surv <- cbind(new_vec, hier_groups[match(rownames(new_vec), rownames(hier_groups))])
surv <- as.data.frame(na.omit(surv))
colnames(surv) <- c("Survival", "Censored","Binary_survival" ,"Cluster")
surv$Binary_survival <- as.factor(surv$Binary_survival)
surv$Cluster <- as.factor(surv$Cluster)
ggsobj <- ggsurvplot(fit = survminer::surv_fit(Surv(`Survival`,Censored) ~ Cluster,
data = surv),
xlab = "Days",
ylab = "Proportion alive",risk.table = T)
res.cox<-coxph(Surv(`Survival`,Censored) ~ Cluster,
data = surv)
p1 <- KMplot(ggsobj, summary(res.cox)$conf.int[2], summary(res.cox)$coefficients[5])
p1
clinical_data
head(surv)
rownames(surv)
unique(PD1$SampleID)
sel_images
group_covariate_names = c("SampleID","Group","immuneGroup")
write.csv(PD1[PD1$SampleID %in% all_patients,], "/Users/seals/Documents/GitHub/DenVar/Data/PD1_TNBC_MIBI.csv")
PD1 = PD1[PD1$SampleID %in% all_patients,]
unique(PD1$SampleID)
surv_save = surv[,c(1,2)]
head(surv_save)
rownames(surv_save)
surv_save$SampleID = rownames(surv_save)
head(surv_save)
surv_save = surv[,c(1,2)]
colnames(surv_save)[1] = "Survival in days"
surv_save$SampleID = rownames(surv_save)
head(surv_save)
write.csv(surv_save[,c(3,1,2)], "/Users/seals/Documents/GitHub/DenVar/Data/Survival_TNBC_MIBI.csv")
require(pheatmap)
require(ggplot2)
require(LaplacesDemon)
getwd()
setwd("/Users/seals/Documents/GitHub/DenVar")
PD1_data = read.csv("Data/PD1_TNBC_MIBI.csv")
clinical_data = read.csv("Data/Survival_TNBC_MIBI.csv")
devtools::document()
devtools::document()
head(PD)
head(PD1)
devtools::document()
PD1_data = read.csv("Data/PD1_TNBC_MIBI.csv")
clinical_data = read.csv("Data/Survival_TNBC_MIBI.csv")
devtools::install_github('sealx017/DenVar')
devtools::install_github('sealx017/DenVar')
require(DenVar)
require(pheatmap)
require(ggplot2)
require(LaplacesDemon)
PD1_data = read.csv("Data/PD1_TNBC_MIBI.csv")
clinical_data = read.csv("Data/Survival_TNBC_MIBI.csv")
KDE_of_all = Array_KDE(Data = PD1_data, ngrids = 1024)
KDE_of_all
dim(PD1)
dim(PD1_data)
head(PD1_data)
PD1_data = read.csv("Data/PD1_TNBC_MIBI.csv")[,-1]
clinical_data = read.csv("Data/Survival_TNBC_MIBI.csv")[,-1]
head(PD1_data)
KDE_of_all = Array_KDE(Data = PD1_data, ngrids = 1024)
KDE_of_all
JSD_matrix_between_all = JSD_matrix(KDE_of_all)
JSD_matrix_between_all
hier_clustering <- hclust(as.dist(JSD_matrix_between_all), method="ward.D")
hier_groups <- as.matrix(cutree(hier_clustering, k=2))
hier_groups
head(clinical_data)
hier_clustering = hclust(as.dist(JSD_matrix_between_all), method="ward.D")
hier_groups = as.data.frame(cutree(hier_clustering, k=2)); colnames(hier_groups) = "Cluster"
surv = merge(clinical_data, hier_groups, by = "row.names")
head(surv)
head(surv$Row.names)
(surv$Row.names)
row.names(clinical_data)
surv = cbind(clinical_data, hier_groups)
head(surv)
devtools::install_github('sealx017/DenVar')
devtools::install_github('sealx017/DenVar')
devtools::install_github('sealx017/DenVar')
coxPH_plot(surv)
coxplot = coxPH_plot(surv)
devtools::install_github('sealx017/DenVar')
coxPH_plot(surv)
ggsobj <- ggsurvplot(fit = survminer::surv_fit(Surv(`Survival.in.days`,Censored) ~ Cluster, data = surv),
xlab = "Days", ylab = "Proportion alive",risk.table = T)
ggsobj
res.cox<-coxph(Surv(`Survival.in.days`,Censored) ~ Cluster, data = surv)
p1 <- KMplot(ggsobj, summary(res.cox)$conf.int[2], summary(res.cox)$coefficients[5])
p1
v = list(plot = p1, HR = summary(res.cox)$conf.int[2], pvalue = summary(res.cox)$coefficients[5])
v
v$plot
devtools::install_github('sealx017/DenVar')
require(DenVar)
coxplot = coxPH_plot(surv)
coxplot
coxplot = DenVar::coxPH_plot(surv)
coxplot
head(surv)
coxplot = DenVar::coxPH_plot(surv = surv)
coxPH_plot = function(surv){
ggsobj <- ggsurvplot(fit = survminer::surv_fit(Surv(`Survival.in.days`,Censored) ~ Cluster, data = surv),
xlab = "Days", ylab = "Proportion alive",risk.table = T)
res.cox<-coxph(Surv(`Survival.in.days`,Censored) ~ Cluster, data = surv)
p1 <- KMplot(ggsobj, summary(res.cox)$conf.int[2], summary(res.cox)$coefficients[5])
#print(p1)
return(list(plot = p1, HR = summary(res.cox)$conf.int[2], pvalue = summary(res.cox)$coefficients[5]))
}
coxplot = coxPH_plot(surv)
coxplot
devtools::install_github('sealx017/DenVar')
help(DenVar)
??DenVar
require(DenVar)
coxplot = DenVar::coxPH_plot(surv)
coxplot
DenVar::coxPH_plot()
DenVar::coxPH_plot
devtools::install_github('sealx017/DenVar')
DenVar::coxPH_plot()
DenVar::Array_KDE()
DenVar::Array_KDE
DenVar::coxme_model
detach(DenVar)
detach("DenVar")
DenVar::dens_univ
detach(package:DenVar,unload=TRUE)
require(DenVar)
DenVar::coxPH_plot
DenVar::PD1_TNBC_MIBI
require(DenVar)
require(LaplacesDemon)
require(pheatmap)
require(ggplot2)
require(survminer)
require(coxme)
PD1_data = read.csv("Data/PD1_TNBC_MIBI.csv")[,-1]
clinical_data = read.csv("Data/Survival_TNBC_MIBI.csv")[,-1]
KDE_of_all = Array_KDE(Data = PD1_data, ngrids = 1024)
JSD_matrix_between_all = JSD_matrix(KDE_of_all)
detach(package:DenVar,unload=TRUE)
devtools::install_github('sealx017/DenVar')
devtools::install_github('sealx017/DenVar', force = "TRUE")
require(DenVar)
DenVar::coxPH_plot
remove.packages("DenVar")
devtools::install_github('sealx017/DenVar', force = "TRUE")
require(DenVar)
devtools::document()
devtools::install_github('sealx017/DenVar', force = "TRUE")
require(DenVar)
DenVar::coxPH_plot
KDE_of_all = Array_KDE(Data = PD1_data, ngrids = 1024)
JSD_matrix_between_all = JSD_matrix(KDE_of_all)
hier_clustering = hclust(as.dist(JSD_matrix_between_all), method="ward.D")
hier_groups = as.data.frame(cutree(hier_clustering, k=2)); colnames(hier_groups) = "Cluster"
surv = cbind(clinical_data, hier_groups)
coxplot = coxPH_plot(surv)
coxplot$plot
res.coxme = coxme_model(surv, JSD_matrix_between_all)
devtools::document()
devtools::install_github('sealx017/DenVar')
require(DenVar)
res.coxme = coxme_model(surv, JSD_matrix_between_all)
res.coxme<-coxme(Surv(`Survival.in.days`,Censored) ~ (1|SampleID), data = surv,
varlist = coxmeMlist(list(exp_dist),rescale = FALSE,
pdcheck = TRUE, positive = TRUE))
exp_dist = exp(-JSD_matrix_between_all)
res.coxme<-coxme(Surv(`Survival.in.days`,Censored) ~ (1|SampleID), data = surv,
varlist = coxmeMlist(list(exp_dist),rescale = FALSE,
pdcheck = TRUE, positive = TRUE))
VarCorr(res.coxme)
res.coxme$vcoef
res.coxme$variance
res.coxme$coefficients
summary(res.coxme)
devtools::document()
devtools::install_github('sealx017/DenVar')
devtools::install_github('sealx017/DenVar')
require(DenVar)
res.coxme = coxme_model(surv, JSD_matrix_between_all)
print(coxme)
res.coxme = coxme_model(surv, JSD_matrix_between_all)
print(res.coxme)
print(pheatmap::pheatmap::pheatmap(JSD_matrix_between_all, cluster_rows = TRUE,
cluster_cols = TRUE,show_colnames = T, show_rownames = T,treeheight_row=0,treeheight_col = 0))
print(pheatmap(JSD_matrix_between_all, cluster_rows = TRUE,
cluster_cols = TRUE,show_colnames = T, show_rownames = T,treeheight_row=0,treeheight_col = 0))
DenVar::Array_KDE
Array_KDE
KDE_of_all = Array_KDE(Data = PD1_data, ngrids = 1024)
JSD_matrix_between_all = JSD_matrix(KDE_of_all)
KDE_of_all
devtools::document()
DenVar::Array_KDE
